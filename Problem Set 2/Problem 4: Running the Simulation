def runSimulation(num_robots, speed, width, height, min_coverage, num_trials,
                  robot_type):
    """
    Runs NUM_TRIALS trials of the simulation and returns the mean number of
    time-steps needed to clean the fraction MIN_COVERAGE of the room.

    The simulation is run with NUM_ROBOTS robots of type ROBOT_TYPE, each with
    speed SPEED, in a room of dimensions WIDTH x HEIGHT.

    num_robots: an int (num_robots > 0)
    speed: a float (speed > 0)
    width: an int (width > 0)
    height: an int (height > 0)
    min_coverage: a float (0 <= min_coverage <= 1.0)
    num_trials: an int (num_trials > 0)
    robot_type: class of robot to be instantiated (e.g. StandardRobot or
                RandomWalkRobot)
    """
    results = []
    '''making a list for all MEAN results'''
    
    for i in range(num_trials):
        ''' iterating over range of number trails
        counting steps, creating room and list of robots
        '''
        num_steps = 0
        room = RectangularRoom(width, height)
        robots = [robot_type(room,speed) for j in range(num_robots)]
        
        while room.getNumCleanedTiles() / room.getNumTiles()  < min_coverage:
            '''while (mean) is less than min_coverage im going to loop FOR
            and going to count steps'''
            num_steps += 1
            for r in robots:
                r.updatePositionAndClean()
                '''for every single robot update position and clean'''    
            if room.getNumCleanedTiles()/ room.getNumTiles() >= min_coverage:
                    results.append(num_steps)
            else:
                continue

                    
    return sum(results)/len(results)
